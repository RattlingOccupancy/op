"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RettiwtConfig = void 0;
const https_1 = require("https");
const https_proxy_agent_1 = require("https-proxy-agent");
const AuthService_1 = require("../services/internal/AuthService");
class RettiwtConfig {
    // Parameters for internal use
    _apiKey;
    _httpsAgent;
    _userId;
    // Parameters that can be set once, upon initialization
    delay;
    errorHandler;
    logging;
    tidProvider;
    timeout;
    // Parameters that can be changed on the fly
    headers;
    /**
     * @param config - The config for Rettiwt of type {@link IRettiwtConfig}.
     */
    constructor(config) {
        this._apiKey = config?.apiKey;
        this._httpsAgent = config?.proxyUrl ? new https_proxy_agent_1.HttpsProxyAgent(config?.proxyUrl) : new https_1.Agent();
        this._userId = config?.apiKey ? AuthService_1.AuthService.getUserId(config?.apiKey) : undefined;
        this.delay = config?.delay;
        this.errorHandler = config?.errorHandler;
        this.logging = config?.logging;
        this.tidProvider = config?.tidProvider;
        this.timeout = config?.timeout;
        this.apiKey = config?.apiKey;
        this.headers = config?.headers;
    }
    get apiKey() {
        return this._apiKey;
    }
    /** The HTTPS agent instance to use. */
    get httpsAgent() {
        return this._httpsAgent;
    }
    /** The ID of the user associated with the API key, if any. */
    get userId() {
        return this._userId;
    }
    set apiKey(apiKey) {
        this._apiKey = apiKey;
        this._userId = apiKey ? AuthService_1.AuthService.getUserId(apiKey) : undefined;
    }
    set proxyUrl(proxyUrl) {
        this._httpsAgent = proxyUrl ? new https_proxy_agent_1.HttpsProxyAgent(proxyUrl) : new https_1.Agent();
    }
}
exports.RettiwtConfig = RettiwtConfig;
//# sourceMappingURL=RettiwtConfig.js.map