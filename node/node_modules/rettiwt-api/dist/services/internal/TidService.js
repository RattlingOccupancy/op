"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TidService = void 0;
const axios_1 = __importDefault(require("axios"));
const htmlParser = __importStar(require("node-html-parser"));
const Logging_1 = require("../../enums/Logging");
const TidUtils_1 = require("../../helper/TidUtils");
const LogService_1 = require("./LogService");
/**
 * Handles transaction ID generation for requests to Twitter.
 *
 * @internal
 */
class TidService {
    _cdnUrl;
    _config;
    _requestHeaders;
    _dynamicArgs;
    /**
     * @param config - The config for Rettiwt.
     */
    constructor(config) {
        this._cdnUrl = 'https://abs.twimg.com/responsive-web/client-web';
        this._config = config;
        this._requestHeaders = {
            /* eslint-disable @typescript-eslint/naming-convention */
            Authority: 'x.com',
            'Accept-Language': 'en-US,en;q=0.9',
            'Cache-Control': 'no-cache',
            Referer: 'https://x.com',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36',
            'X-Twitter-Active-User': 'yes',
            'X-Twitter-Client-Language': 'en',
            /* eslint-enable @typescript-eslint/naming-convention */
        };
    }
    /**
     * Fetches the dynamic args embedded in the homepage.
     *
     * @returns The new dynamic args.
     */
    async getDynamicArgs() {
        const html = await this.getHomepageHtml();
        const root = htmlParser.parse(html);
        const keyElement = root.querySelector("[name='twitter-site-verification']");
        const frameElements = root.querySelectorAll("[id^='loading-x-anim']");
        return {
            verificationKey: keyElement?.getAttribute('content') ?? '',
            frames: frameElements.map((el) => this.parseFrameElement(el)),
            indices: await this.getKeyBytesIndices(html),
        };
    }
    /**
     * Fetches the HTML content of Twitter's homepage.
     *
     * @returns The stringified HTML content of the homepage.
     */
    async getHomepageHtml() {
        const response = await axios_1.default.get('https://x.com', {
            headers: this._requestHeaders,
            httpAgent: this._config.httpsAgent,
            httpsAgent: this._config.httpsAgent,
        });
        return response.data;
    }
    async getKeyBytesIndices(html) {
        const ondemandFileMatch = html.match(/ondemand\.s":"([^"]+)"/);
        if (!ondemandFileMatch || !ondemandFileMatch[1]) {
            LogService_1.LogService.log(Logging_1.ELogActions.WARNING, { message: 'ondemand.s file not found' });
            return [0, 0, 0, 0];
        }
        const onDemandFileHash = ondemandFileMatch ? ondemandFileMatch[1] : '';
        const response = await axios_1.default.get(`${this._cdnUrl}/ondemand.s.${onDemandFileHash}a.js`, {
            httpAgent: this._config.httpsAgent,
            httpsAgent: this._config.httpsAgent,
        });
        const match = response.data.matchAll(/(\(\w\[(\d{1,2})],\s*16\))+?/gm);
        return Array.from(match).map((m) => Number(m[2]));
    }
    parseFrameElement(element) {
        const pathElement = element.children[0].children[1];
        const value = pathElement.getAttribute('d');
        if (!value) {
            return [[]];
        }
        const rawFrames = value.substring(9).split('C');
        return rawFrames.map((str) => str.replaceAll(/\D+/g, ' ').trim().split(' ')).map((arr) => arr.map(Number));
    }
    /**
     * Generate an `x-client-transaction-id` for the specific URL method and path.
     *
     * @param method - The target method.
     * @param path - The target path.
     *
     * @returns The specific `x-client-transaction-id` token.
     */
    async generate(method, path) {
        try {
            if (!this._dynamicArgs) {
                this._dynamicArgs = await this.getDynamicArgs();
            }
            const { verificationKey, frames, indices } = this._dynamicArgs;
            return (0, TidUtils_1.calculateClientTransactionIdHeader)({
                keyword: 'obfiowerehiring',
                method: method,
                path: path,
                verificationKey: verificationKey,
                frames: frames,
                indices: indices,
                extraByte: 3,
            });
        }
        catch {
            return;
        }
    }
    /**
     * Refreshes the dynamic args from the homepage.
     */
    async refreshDynamicArgs() {
        this._dynamicArgs = await this.getDynamicArgs();
    }
}
exports.TidService = TidService;
//# sourceMappingURL=TidService.js.map